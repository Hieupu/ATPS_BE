const CourseModel = require("../models/course");
const CourseRequest = require("../requests/CourseRequest");

/**
 * CourseService - Business logic layer cho Course management
 */
class CourseService {
  // T·∫°o kh√≥a h·ªçc m·ªõi
  static async createCourse(data) {
    try {
      console.log("üìö CourseService.createCourse - Input data:", data);

      // T·∫°o CourseRequest object v√† validate
      const courseRequest = new CourseRequest(data);
      const validation = courseRequest.validateForCreate();

      if (!validation.isValid) {
        return {
          success: false,
          message: "Validation failed",
          errors: validation.errors,
        };
      }

      // Chuy·ªÉn ƒë·ªïi th√†nh database object
      const courseData = courseRequest.toDatabaseObject();
      console.log(
        "üìö CourseService.createCourse - Database object:",
        courseData
      );

      // G·ªçi model ƒë·ªÉ t·∫°o course
      const newCourse = await CourseModel.create(courseData);
      console.log("‚úÖ CourseService.createCourse - Result:", newCourse);

      return {
        success: true,
        message: "T·∫°o kh√≥a h·ªçc th√†nh c√¥ng",
        data: newCourse,
      };
    } catch (error) {
      console.error("‚ùå CourseService.createCourse - Error:", error);
      return {
        success: false,
        message: "L·ªói khi t·∫°o kh√≥a h·ªçc",
        error: error.message,
      };
    }
  }

  // L·∫•y danh s√°ch kh√≥a h·ªçc
  static async getAllCourses(options = {}) {
    try {
      console.log("üìö CourseService.getAllCourses - Options:", options);

      const result = await CourseModel.findAll(options);
      console.log("‚úÖ CourseService.getAllCourses - Result:", result);

      return {
        success: true,
        message: "L·∫•y danh s√°ch kh√≥a h·ªçc th√†nh c√¥ng",
        data: result.data,
        pagination: result.pagination,
      };
    } catch (error) {
      console.error("‚ùå CourseService.getAllCourses - Error:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc",
        error: error.message,
      };
    }
  }

  // L·∫•y kh√≥a h·ªçc c·ªßa instructor
  static async getInstructorCourses(instructorId, options = {}) {
    try {
      console.log(
        "üìö CourseService.getInstructorCourses - InstructorID:",
        instructorId,
        "Options:",
        options
      );

      const result = await CourseModel.findAll({
        ...options,
        instructorId: instructorId,
      });
      console.log("‚úÖ CourseService.getInstructorCourses - Result:", result);

      return {
        success: true,
        message: "L·∫•y danh s√°ch kh√≥a h·ªçc c·ªßa instructor th√†nh c√¥ng",
        data: result.data,
        pagination: result.pagination,
      };
    } catch (error) {
      console.error("‚ùå CourseService.getInstructorCourses - Error:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y danh s√°ch kh√≥a h·ªçc c·ªßa instructor",
        error: error.message,
      };
    }
  }

  // L·∫•y chi ti·∫øt kh√≥a h·ªçc
  static async getCourseById(courseId) {
    try {
      console.log("üìö CourseService.getCourseById - CourseID:", courseId);

      const courseData = await CourseModel.findById(courseId);

      if (!courseData) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc",
          data: null,
        };
      }

      console.log("‚úÖ CourseService.getCourseById - Result:", courseData);

      return {
        success: true,
        message: "L·∫•y chi ti·∫øt kh√≥a h·ªçc th√†nh c√¥ng",
        data: courseData,
      };
    } catch (error) {
      console.error("‚ùå CourseService.getCourseById - Error:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y chi ti·∫øt kh√≥a h·ªçc",
        error: error.message,
      };
    }
  }

  // C·∫≠p nh·∫≠t kh√≥a h·ªçc
  static async updateCourse(courseId, data) {
    try {
      console.log(
        "üìö CourseService.updateCourse - CourseID:",
        courseId,
        "Data:",
        data
      );

      // T·∫°o CourseRequest object v√† validate
      const courseRequest = new CourseRequest(data);
      const validation = courseRequest.validateForUpdate();

      if (!validation.isValid) {
        return {
          success: false,
          message: "Validation failed",
          errors: validation.errors,
        };
      }

      // Chuy·ªÉn ƒë·ªïi th√†nh database object
      const courseData = courseRequest.toDatabaseObject();
      console.log(
        "üìö CourseService.updateCourse - Database object:",
        courseData
      );

      // G·ªçi model ƒë·ªÉ c·∫≠p nh·∫≠t course
      const updatedCourse = await CourseModel.update(courseId, courseData);

      if (!updatedCourse) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t",
          data: null,
        };
      }

      console.log("‚úÖ CourseService.updateCourse - Result:", updatedCourse);

      return {
        success: true,
        message: "C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng",
        data: updatedCourse,
      };
    } catch (error) {
      console.error("‚ùå CourseService.updateCourse - Error:", error);
      return {
        success: false,
        message: "L·ªói khi c·∫≠p nh·∫≠t kh√≥a h·ªçc",
        error: error.message,
      };
    }
  }

  // X√≥a kh√≥a h·ªçc
  static async deleteCourse(courseId) {
    try {
      console.log("üìö CourseService.deleteCourse - CourseID:", courseId);

      const deleted = await CourseModel.delete(courseId);

      if (!deleted) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ƒë·ªÉ x√≥a",
          data: null,
        };
      }

      console.log("‚úÖ CourseService.deleteCourse - Result:", deleted);

      return {
        success: true,
        message: "X√≥a kh√≥a h·ªçc th√†nh c√¥ng",
        data: { CourseID: courseId },
      };
    } catch (error) {
      console.error("‚ùå CourseService.deleteCourse - Error:", error);
      return {
        success: false,
        message: "L·ªói khi x√≥a kh√≥a h·ªçc",
        error: error.message,
      };
    }
  }

  // G√°n kh√≥a h·ªçc cho l·ªõp
  static async assignCourseToClass(classId, courseId) {
    try {
      console.log(
        "üìö CourseService.assignCourseToClass - ClassID:",
        classId,
        "CourseID:",
        courseId
      );

      // Ki·ªÉm tra course c√≥ t·ªìn t·∫°i kh√¥ng
      const course = await CourseModel.findById(courseId);
      if (!course) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc",
          data: null,
        };
      }

      // C·∫≠p nh·∫≠t class v·ªõi CourseID
      const ClassModel = require("../models/class");
      const updatedClass = await ClassModel.update(classId, {
        CourseID: courseId,
      });

      if (!updatedClass) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc",
          data: null,
        };
      }

      console.log("‚úÖ CourseService.assignCourseToClass - Result:", {
        updatedClass,
        course,
      });

      return {
        success: true,
        message: "G√°n kh√≥a h·ªçc cho l·ªõp th√†nh c√¥ng",
        data: {
          ClassID: classId,
          ClassName: updatedClass.ClassName,
          CourseID: courseId,
          CourseTitle: course.Title,
        },
      };
    } catch (error) {
      console.error("‚ùå CourseService.assignCourseToClass - Error:", error);
      return {
        success: false,
        message: "L·ªói khi g√°n kh√≥a h·ªçc cho l·ªõp",
        error: error.message,
      };
    }
  }
}

module.exports = CourseService;



