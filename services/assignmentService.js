// services/assignmentService.js
const assignmentRepository = require("../repositories/assignmentRepository");

class ServiceError extends Error {
  constructor(message, status = 400) {
    super(message);
    this.status = status;
  }
}

const ALLOWED_TYPES = ["assignment", "homework"];
const ALLOWED_STATUSES = ["active", "inactive", "deleted"];

function assertValidDateStr(dateStr) {
  const d = new Date(dateStr);
  if (Number.isNaN(d.getTime())) throw new ServiceError("H·∫°n n·ªôp kh√¥ng h·ª£p l·ªá (yyyy-mm-dd)", 400);
}

const createAssignmentService = async (instructorAccId, data) => {
  const { title, description, deadline, type, unitId, status } = data;
  if (!title?.trim()) throw new ServiceError("Ti√™u ƒë·ªÅ l√† b·∫Øt bu·ªôc");
  if (!description?.trim()) throw new ServiceError("M√¥ t·∫£ l√† b·∫Øt bu·ªôc");
  if (!deadline) throw new ServiceError("H·∫°n n·ªôp l√† b·∫Øt bu·ªôc");
  assertValidDateStr(deadline);
  if (!ALLOWED_TYPES.includes(type)) throw new ServiceError("Lo·∫°i b√†i t·∫≠p kh√¥ng h·ª£p l·ªá");
  if (!unitId) throw new ServiceError("UnitID l√† b·∫Øt bu·ªôc");

  const canAccess = await assignmentRepository.canInstructorAccessUnit(instructorAccId, unitId);
  if (!canAccess) throw new ServiceError("B·∫°n kh√¥ng c√≥ quy·ªÅn v·ªõi Unit n√†y", 403);

  return assignmentRepository.createAssignment({
    title: title.trim(),
    description: description.trim(),
    deadline,
    type,
    unitId: Number(unitId),
    status: ALLOWED_STATUSES.includes(status) ? status : "active",
  });
};

const getAssignmentsService = async (instructorAccId) =>
  assignmentRepository.getAssignmentsByInstructor(instructorAccId);

const updateAssignmentService = async (instructorAccId, assignmentId, payload) => {
  const canAccess = await assignmentRepository.canInstructorAccessAssignment(instructorAccId, assignmentId);
  if (!canAccess) throw new ServiceError("Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t b√†i t·∫≠p n√†y", 403);

  const updated = await assignmentRepository.updateAssignment(assignmentId, payload);
  if (!updated) throw new ServiceError("Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p", 404);
  return updated;
};

// üîπ PATCH /assignments/:id/status
const updateAssignmentStatusService = async (instructorAccId, assignmentId, status) => {
  if (!ALLOWED_STATUSES.includes(status)) throw new ServiceError("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá", 400);

  const canAccess = await assignmentRepository.canInstructorAccessAssignment(instructorAccId, assignmentId);
  if (!canAccess) throw new ServiceError("Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i t·∫≠p n√†y", 403);

  const updated = await assignmentRepository.updateAssignment(assignmentId, { status });
  if (!updated) throw new ServiceError("Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p", 404);

  return updated;
};

module.exports = {
  createAssignmentService,
  getAssignmentsService,
  updateAssignmentService,
  updateAssignmentStatusService,
};
