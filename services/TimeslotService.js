const TimeslotModel = require("../models/timeslot");
const TimeslotRequest = require("../requests/TimeslotRequest");

/**
 * TimeslotService - Business logic layer cho Timeslot management
 */
class TimeslotService {
  // T·∫°o timeslot m·ªõi
  static async createTimeslot(data) {
    try {
      console.log("üìÖ TimeslotService.createTimeslot - Input data:", data);

      // T·∫°o TimeslotRequest object v√† validate
      const timeslotRequest = new TimeslotRequest(data);
      const validation = timeslotRequest.validateForCreate();

      if (!validation.isValid) {
        return {
          success: false,
          message: "Validation failed",
          errors: validation.errors,
        };
      }

      // Chuy·ªÉn ƒë·ªïi th√†nh database object
      const timeslotData = timeslotRequest.toDatabaseObject();
      console.log(
        "üìÖ TimeslotService.createTimeslot - Database object:",
        timeslotData
      );

      // G·ªçi model ƒë·ªÉ t·∫°o timeslot
      const newTimeslot = await TimeslotModel.create(timeslotData);
      console.log("‚úÖ TimeslotService.createTimeslot - Result:", newTimeslot);

      return {
        success: true,
        message: "T·∫°o timeslot th√†nh c√¥ng",
        data: newTimeslot,
      };
    } catch (error) {
      console.error("‚ùå TimeslotService.createTimeslot - Error:", error);
      return {
        success: false,
        message: "L·ªói khi t·∫°o timeslot",
        error: error.message,
      };
    }
  }

  // L·∫•y danh s√°ch timeslots
  static async getAllTimeslots(options = {}) {
    try {
      console.log("üìÖ TimeslotService.getAllTimeslots - Options:", options);

      const result = await TimeslotModel.findAll(options);
      console.log("‚úÖ TimeslotService.getAllTimeslots - Result:", result);

      return {
        success: true,
        message: "L·∫•y danh s√°ch timeslots th√†nh c√¥ng",
        data: result.data,
        pagination: result.pagination,
      };
    } catch (error) {
      console.error("‚ùå TimeslotService.getAllTimeslots - Error:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y danh s√°ch timeslots",
        error: error.message,
      };
    }
  }

  // L·∫•y timeslot theo ID
  static async getTimeslotById(timeslotId) {
    try {
      console.log(
        "üìÖ TimeslotService.getTimeslotById - TimeslotID:",
        timeslotId
      );

      const timeslot = await TimeslotModel.findById(timeslotId);

      if (!timeslot) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y timeslot",
          data: null,
        };
      }

      console.log("‚úÖ TimeslotService.getTimeslotById - Result:", timeslot);

      return {
        success: true,
        message: "L·∫•y chi ti·∫øt timeslot th√†nh c√¥ng",
        data: timeslot,
      };
    } catch (error) {
      console.error("‚ùå TimeslotService.getTimeslotById - Error:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y chi ti·∫øt timeslot",
        error: error.message,
      };
    }
  }

  // C·∫≠p nh·∫≠t timeslot
  static async updateTimeslot(timeslotId, data) {
    try {
      console.log(
        "üìÖ TimeslotService.updateTimeslot - TimeslotID:",
        timeslotId,
        "Data:",
        data
      );

      // T·∫°o TimeslotRequest object v√† validate
      const timeslotRequest = new TimeslotRequest(data);
      const validation = timeslotRequest.validateForUpdate();

      if (!validation.isValid) {
        return {
          success: false,
          message: "Validation failed",
          errors: validation.errors,
        };
      }

      // Chuy·ªÉn ƒë·ªïi th√†nh database object
      const timeslotData = timeslotRequest.toDatabaseObject();
      console.log(
        "üìÖ TimeslotService.updateTimeslot - Database object:",
        timeslotData
      );

      // G·ªçi model ƒë·ªÉ c·∫≠p nh·∫≠t timeslot
      const updatedTimeslot = await TimeslotModel.update(
        timeslotId,
        timeslotData
      );

      if (!updatedTimeslot) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y timeslot ƒë·ªÉ c·∫≠p nh·∫≠t",
          data: null,
        };
      }

      console.log(
        "‚úÖ TimeslotService.updateTimeslot - Result:",
        updatedTimeslot
      );

      return {
        success: true,
        message: "C·∫≠p nh·∫≠t timeslot th√†nh c√¥ng",
        data: updatedTimeslot,
      };
    } catch (error) {
      console.error("‚ùå TimeslotService.updateTimeslot - Error:", error);
      return {
        success: false,
        message: "L·ªói khi c·∫≠p nh·∫≠t timeslot",
        error: error.message,
      };
    }
  }

  // X√≥a timeslot
  static async deleteTimeslot(timeslotId) {
    try {
      console.log(
        "üìÖ TimeslotService.deleteTimeslot - TimeslotID:",
        timeslotId
      );

      const deleted = await TimeslotModel.delete(timeslotId);

      if (!deleted) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y timeslot ƒë·ªÉ x√≥a",
          data: null,
        };
      }

      console.log("‚úÖ TimeslotService.deleteTimeslot - Result:", deleted);

      return {
        success: true,
        message: "X√≥a timeslot th√†nh c√¥ng",
        data: { TimeslotID: timeslotId },
      };
    } catch (error) {
      console.error("‚ùå TimeslotService.deleteTimeslot - Error:", error);
      return {
        success: false,
        message: "L·ªói khi x√≥a timeslot",
        error: error.message,
      };
    }
  }

  // L·∫•y timeslots theo ClassID
  static async getTimeslotsByClassId(classId) {
    try {
      console.log(
        "üìÖ TimeslotService.getTimeslotsByClassId - ClassID:",
        classId
      );

      const timeslots = await TimeslotModel.findByClassId(classId);
      console.log(
        "‚úÖ TimeslotService.getTimeslotsByClassId - Result:",
        timeslots
      );

      return {
        success: true,
        message: "L·∫•y timeslots c·ªßa l·ªõp th√†nh c√¥ng",
        data: timeslots,
      };
    } catch (error) {
      console.error("‚ùå TimeslotService.getTimeslotsByClassId - Error:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y timeslots c·ªßa l·ªõp",
        error: error.message,
      };
    }
  }

  // L·∫•y l·ªãch h·ªçc c·ªßa h·ªçc vi√™n
  static async getLearnerSchedule(learnerId) {
    try {
      console.log(
        "üìÖ TimeslotService.getLearnerSchedule - LearnerID:",
        learnerId
      );

      const schedule = await TimeslotModel.getLearnerSchedule(learnerId);
      console.log("‚úÖ TimeslotService.getLearnerSchedule - Result:", schedule);

      return {
        success: true,
        message: "L·∫•y l·ªãch h·ªçc c·ªßa h·ªçc vi√™n th√†nh c√¥ng",
        data: schedule,
      };
    } catch (error) {
      console.error("‚ùå TimeslotService.getLearnerSchedule - Error:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y l·ªãch h·ªçc c·ªßa h·ªçc vi√™n",
        error: error.message,
      };
    }
  }
}

module.exports = TimeslotService;



